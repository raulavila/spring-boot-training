buildscript {
	ext {
		springBootVersion = '1.3.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'idea'

jar {
	baseName = 'spring-rest-training'
	version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.9'
}


//--------------- Integration tests

//source: http://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-integration-testing/

sourceSets {
	//Declaring this source set creates compile time and runtime configurations for it.
	integrationTest {
		java.srcDir file('src/integration-test/java')
		resources.srcDir file('src/integration-test/resources')
		compileClasspath += sourceSets.main.output + sourceSets.test.output
		runtimeClasspath += sourceSets.main.output + sourceSets.test.output
	}
}

//Configures the compile and runtime configurations for our integration tests
//and includes the dependencies of the test task.
configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}

//Create the task that runs the integration tests found from the
//configured source directory and uses the correct classpath.
task integrationTest(type: Test) {
	testClassesDir = sourceSets.integrationTest.output.classesDir
	classpath = sourceSets.integrationTest.runtimeClasspath
	//If you want to ensure that integration tests are run every time when you invoke
	//this task, uncomment the following line.
	//outputs.upToDateWhen { false }
}

//Ensure that the check task fails the build if there are failing integration tests.
check.dependsOn integrationTest
//Ensure that our unit tests are run before our integration tests
integrationTest.mustRunAfter test

//Ensure that the HTML reports of unit and integration tests are written to different directories.
tasks.withType(Test) {
	reports.html.destination = file("${reporting.baseDir}/${name}")
}

//--------------------

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.security.oauth:spring-security-oauth2')
	compile("org.thymeleaf.extras:thymeleaf-extras-springsecurity4")
	compile('org.springframework.boot:spring-boot-starter-actuator')

	compile("org.springframework.boot:spring-boot-devtools")

	compile('org.webjars:bootstrap:3.3.4')
	compile('org.webjars:jquery:2.1.4')

	runtime('mysql:mysql-connector-java')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('com.jayway.jsonpath:json-path:2.1.0')
	testRuntime('com.h2database:h2:1.4.191')

	integrationTestCompile('org.fluentlenium:fluentlenium-core:0.10.9')
	integrationTestCompile('org.fluentlenium:fluentlenium-assertj:0.10.9')
}

idea {
	module {
		scopes.TEST.plus += [ configurations.integrationTestCompile ]
		inheritOutputDirs = false
		outputDir = file("$buildDir/classes/main/")
	}
}

bootRun {
	addResources = true
}